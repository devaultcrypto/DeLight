#!/bin/bash

contrib=$(dirname "$0")
test -n "$contrib" -a -d "$contrib" || (echo "Could not find the contrib/ directory" && exit 1)
pushd "$contrib"
contrib=`pwd`  # get abs path
. "$contrib"/base.sh || (echo "Could not source contrib/base.sh" && exit 1)

set -e

which git || fail "Git is required to proceed"

info "Refreshing submodules..."
git submodule init
git submodule update

info "Building libsecp256k1..."
LIBSECP_VERSION="b8038e3edf903fd945c0e9156bec42107380aba3"  # According to Mark B. Lundeberg, using a commit hash guarantees no repository man-in-the-middle funny business as git is secure when verifying hashes.

pushd "$contrib"/secp256k1 || fail "Could not chdir to ${contrib}/secp256k1"
git checkout $LIBSECP_VERSION || fail "Could not check out secp256k1 $LIBSECP_VERSION"
git clean -dfxq
./autogen.sh || fail "Could not run autogen for secp256k1. Please make sure you have automake and libtool installed, and try again."
./configure \
    --enable-module-recovery \
    --enable-experimental \
    --enable-module-ecdh \
    --disable-jni \
    --with-bignum=no \
    --enable-module-schnorr \
    --disable-tests \
    --disable-static \
    --enable-shared || fail "Could not configure secp256k1. Please make sure you have a C compiler installed and try again."
make -j4 || fail "Could not build secp256k1"
uname=`uname -s`
if [ "$uname" = "Darwin" ]; then
    libsec_lib="libsecp256k1.0.dylib"
elif [ "$uname" = "Linux" ]; then
    libsec_lib="libsecp256k1.so.0"
else
    fail "Unknown OS! Please manually copy the library produced in .libs/ and put it in the ../../lib folder (top level folder)"
fi
cp -fpv .libs/$libsec_lib ../../lib || fail "Could not copy the secp256k1 binary to its destination"
git checkout master  # Undo the previous explicit checkout to this hash
git clean -dfxq
popd

info "$libsec_lib has been placed in the electroncash 'lib' folder."

popd
