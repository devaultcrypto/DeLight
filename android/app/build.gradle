apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.chaquo.python'

def REPO_ROOT = "../.."
def GENERATED_DIR = "$buildDir/generated/ec"
mkdir(GENERATED_DIR)
def STRINGS_DIR = "$GENERATED_DIR/strings"
def REQUIREMENTS_TXT = "$GENERATED_DIR/requirements.txt"

android {
    lintOptions {
          abortOnError false
    }
    namespace 'cc.devault.delight1'
    compileOptions {
        // Required by ACRA.
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    compileSdkVersion 34

    defaultConfig {
        applicationId "cc.devault.delight"
        minSdkVersion 21

        targetSdkVersion 34

        def ecVersion = null
        file("$REPO_ROOT/lib/version.py").eachLine {
            def matcher = it =~ / *PACKAGE_VERSION *= *'([0-9.]+)'.*/
            if (matcher.matches()) {
                ecVersion = matcher.group(1)
            }
        }
        if (ecVersion == null) {
            throw new GradleException("Couldn't find version number")
        }
        def BUILD_NUM = 1
        versionName "$ecVersion-$BUILD_NUM"
        def verParsed = ecVersion.split(/\./).collect { Integer.parseInt(it) }
        versionCode((verParsed[0] * 1000000) + (verParsed[1] * 10000) + (verParsed[2] * 100) +
                    BUILD_NUM)

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        python {
            pip {
                install "-r", REQUIREMENTS_TXT  // Generated by generateRequirementsTxt below.
                install "-r", "$REPO_ROOT/contrib/deterministic-build/requirements-android.txt"
            }
            pyc {
                src true
                pip true
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    dataBinding.enabled = true

    sourceSets {
        main {
            python {
                srcDir REPO_ROOT
                include "lib/**"  
                exclude "lib/locale/"                             // In ../.. (renamed below)
                include("chaquopy/**", "electroncash_gui/**",  // In src/main/python
                        "electroncash_plugins/**")             //
                exclude "**/*.po", "**/*.pot"

                // From src/main/python
                include "chaquopy/"
                include "electroncash_gui/android/"
            }
            res {
                srcDir STRINGS_DIR  // Generated by generateStrings below.
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {
        MainNet {
            buildConfigField "boolean", "testnet", "false"
        }
        TestNet {
            buildConfigField "boolean", "testnet", "true"
        }
    }

    lintOptions {
        disable "MissingTranslation"
    }

    def keystore = file("../keystore.jks")
    if (keystore.exists()) {
        signingConfigs {
            config {
                storeFile keystore
                keyAlias "key0"
                keyPassword "android"
                storePassword "android"
            }
        }
        buildTypes.all { it.signingConfig signingConfigs.config }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "delight-${variant.versionName}.apk"
        }
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
}

afterEvaluate {
    def stringsTask = task("generateStrings", type: Exec) {
        def scriptFilename = "generate_strings.py"
        inputs.file scriptFilename
        inputs.file "src/main/python/electroncash_gui/android/strings.py"
        outputs.upToDateWhen { file(STRINGS_DIR).exists() }
        doFirst {
            delete(STRINGS_DIR)
        }
        def pyVersion = "3"
        if (System.getProperty("os.name").startsWith("Windows")) {
            executable "py"
            args "-$pyVersion"
        } else {
            executable "python$pyVersion"
        }
        args scriptFilename
        args "--out", STRINGS_DIR
        args "--ignore-unknown-keywords", "tor_binary_name_capitalized"  // See #1989.
    }
    for (variant in android.applicationVariants) {
        tasks.getByName("generate${variant.name.capitalize()}Resources")
            .dependsOn("generateStrings")
    }

    task("deleteStrings") {
        doLast { delete(STRINGS_DIR) }
    }
    task("regenerateStrings") {
        dependsOn ("deleteStrings", "generateStrings")
    }

    // Remove unnecessary or duplicate requirements.
    task("generateRequirementsTxt") {
        inputs.file "$REPO_ROOT/contrib/deterministic-build/requirements.txt"
        outputs.file REQUIREMENTS_TXT
        doLast {
            def buffer = new StringBuilder()
            file(REQUIREMENTS_TXT).withPrintWriter { output ->
                file(inputs.files.singleFile).eachLine { line ->
                    buffer.append(line + "\n")
                    if (!line.endsWith("\\")) {
                        if (!(buffer =~ /^(cffi|pip|QDarkStyle|setuptools|wheel)==/)) {
                            output.print(buffer)
                        }
                        buffer.setLength(0)
                    }
                }
            }
        }
    }
    for (variant in android.applicationVariants) {
        tasks.getByName("generate${variant.name.capitalize()}PythonRequirements")
            .dependsOn("generateRequirementsTxt")
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'com.google.android.material:material:1.11.0'

    // As recommended in zxing-android-embedded documentation, reduce zxing:core version
    // number, otherwise we require API level 19.
    implementation('com.journeyapps:zxing-android-embedded:3.6.0') { transitive = false }
    implementation 'com.google.zxing:core:3.3.0'

    def acraVersion = "5.2.0"
    implementation "ch.acra:acra-core:$acraVersion"
    implementation "ch.acra:acra-dialog:$acraVersion"
    implementation "ch.acra:acra-http:$acraVersion"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
