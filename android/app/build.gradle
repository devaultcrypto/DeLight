apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.chaquo.python'

def REPO_ROOT = "../.."

android {
    lintOptions {
          abortOnError false
    }
    compileOptions {
        // Required by ACRA.
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion 28

    defaultConfig {
        applicationId "cc.devault.delight"
        minSdkVersion 16

        targetSdkVersion 28

        def ecVersion = null
        file("$REPO_ROOT/lib/version.py").eachLine {
            def matcher = it =~ / *PACKAGE_VERSION *= *'([0-9.]+)'.*/
            if (matcher.matches()) {
                ecVersion = matcher.group(1)
            }
        }
        if (ecVersion == null) {
            throw new GradleException("Couldn't find version number")
        }
        def BUILD_NUM = 0
        versionName "$ecVersion-$BUILD_NUM"
        def verParsed = ecVersion.split(/\./).collect { Integer.parseInt(it) }
        versionCode((verParsed[0] * 1000000) + (verParsed[1] * 10000) + (verParsed[2] * 100) +
                    BUILD_NUM)

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        python {
            pip {
                install "-r", "$REPO_ROOT/contrib/deterministic-build/requirements.txt"
                install "-r", "$REPO_ROOT/contrib/deterministic-build/requirements-android.txt"
            }
            pyc {
                src true
                pip true
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    dataBinding.enabled = true

    sourceSets {
        main {
            python {
                srcDir REPO_ROOT
                include "lib/**"                               // In ../.. (renamed below)
                include("chaquopy/**", "electroncash_gui/**",  // In src/main/python
                        "electroncash_plugins/**")             //
                exclude "**/*.po", "**/*.pot"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {
        MainNet {
            buildConfigField "boolean", "testnet", "false"
        }
        TestNet {
            buildConfigField "boolean", "testnet", "true"
        }
    }

    lintOptions {
        disable "MissingTranslation"
    }

    def keystore = file("../keystore.jks")
    if (keystore.exists()) {
        signingConfigs {
            config {
                storeFile keystore
                keyAlias "key0"
                keyPassword "android"
                storePassword "android"
            }
        }
        buildTypes.all { it.signingConfig signingConfigs.config }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "delight-${variant.versionName}.apk"
        }
    }
}

afterEvaluate {
    def stringsTask = task("generateStrings", type: Exec) {
        def pyVersion = "3"
        if (System.getProperty("os.name").startsWith("Windows")) {
            executable "py"
            args "-$pyVersion"
        } else {
            executable "python$pyVersion"
        }
        args "generate_strings.py"
    }

    for (variant in android.applicationVariants) {
        // Rename directories to match package names, like package_dir does in setup.py.
        def task = tasks.getByName("merge${variant.name.capitalize()}PythonSources")
        def dstDir = task.destinationDir
        task.doLast {
            def src = "$dstDir/lib"
            def dst = "$dstDir/electroncash"
            if (! file(src).renameTo(dst)) {
                throw new GradleException("Failed to rename $src to $dst")
            }
        }

        // Automatically generate strings the first time the app is built. To regenerate them
        // later, either delete values/strings.xml and rebuild the app, or simply rerun the
        // `generateStrings` task manually.
        if (!file("src/main/res/values/strings.xml").exists()) {
            tasks.getByName("generate${variant.name.capitalize()}Resources")
                .dependsOn(stringsTask)
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.fragment:fragment-ktx:1.1.0'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.1.0'
    implementation 'com.google.android.material:material:1.0.0'

    // As recommended in zxing-android-embedded documentation, reduce zxing:core version
    // number, otherwise we require API level 19.
    implementation('com.journeyapps:zxing-android-embedded:3.6.0') { transitive = false }
    implementation 'com.google.zxing:core:3.3.0'

    def acraVersion = "5.2.0"
    implementation "ch.acra:acra-core:$acraVersion"
    implementation "ch.acra:acra-dialog:$acraVersion"
    implementation "ch.acra:acra-http:$acraVersion"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}
